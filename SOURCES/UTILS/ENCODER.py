#!/usr/bin/env python3
# Stil C-like: se folosesc doar structuri de bazÄƒ, bucle for explicite È™i operaÈ›ii bitwise.

def encode_message(input_vector):
    # CalculÄƒm lungimea vectorului (stil C-like, folosind buclÄƒ explicitÄƒ)
    n = 0
    while n < len(input_vector):
        n += 1
    # VerificÄƒm dacÄƒ lungimea nu depÄƒÈ™eÈ™te 16 elemente
    if n > 16:
        raise ValueError("Lungimea maximÄƒ admisÄƒ este 16 elemente.")
    
    # IniÈ›ializÄƒm variabila de 32 de biÈ›i pentru bit-packing
    packed = 0
    i = 0
    while i < n:
        val = input_vector[i]
        # VerificÄƒm dacÄƒ valoarea este validÄƒ (Ã®ntre 1 È™i 4)
        if val < 1 or val > 4:
            raise ValueError("Valorile trebuie sÄƒ fie Ã®ntre 1 È™i 4.")
        # MapÄƒm valorile: 1->0, 2->1, 3->2, 4->3 (pentru a folosi 2 biÈ›i)
        val = val - 1
        # InserÄƒm valoarea Ã®n packed la poziÈ›ia 2*i (stil bitwise, little-endian)
        packed |= (val & 0x03) << (2 * i)
        i += 1

    # CalculÄƒm cheia: suma elementelor originale modulo 256
    key = 0
    i = 0
    while i < n:
        key = (key + input_vector[i]) & 0xFF
        i += 1

    # Extragem cei 4 octeÈ›i din valoarea de 32 de biÈ›i (presupunem little-endian)
    vec = [0, 0, 0, 0]
    i = 0
    while i < 4:
        vec[i] = (packed >> (8 * i)) & 0xFF
        i += 1


    # ğŸ”¥ AICI: AplicÄƒm XOR
    i = 0
    while i < 4:
        vec[i] ^= key
        i += 1

    # data1 este lungimea vectorului, data2 este cheia
    data1 = n & 0xFF
    data2 = key & 0xFF

    # ReturnÄƒm tuple-ul final cu cmd type 5 la Ã®nceput
    return (6, data1, data2, vec)





    

def decode_vector(encoded):
    # Se aÈ™teaptÄƒ ca encoded sÄƒ fie o listÄƒ de 6 octeÈ›i.
    if not (len(encoded) == 6):
        raise ValueError("Vectorul codificat trebuie sÄƒ aibÄƒ 6 octeÈ›i.")
    
    # Se extrag lungimea È™i cheia
    n = encoded[0]
    key = encoded[1]

    # Se recupereazÄƒ cei 4 octeÈ›i È™i se anuleazÄƒ XOR-ul
    data = [0, 0, 0, 0]
    i = 0
    while i < 4:
        data[i] = encoded[2 + i] ^ key
        i += 1

    # ReasamblÄƒm valoarea de 32 de biÈ›i
    packed = 0
    i = 0
    while i < 4:
        packed |= data[i] << (8 * i)
        i += 1

    # Extragem elementele: fiecare ocupÄƒ 2 biÈ›i
    output_vector = [0] * n  # alocÄƒm un vector de lungime n
    i = 0
    while i < n:
        # Extragem 2 biÈ›i pentru elementul i
        val = (packed >> (2 * i)) & 0x03
        # Convertim Ã®napoi la intervalul 1-4
        output_vector[i] = val + 1
        i += 1

    return output_vector

# Modul de test:
def main():
    # Exemple de vectori de test (valorile sunt Ã®ntre 1 È™i 4)
    test_vectors = [
        [1, 2, 3, 4, 2, 1, 1, 1, 2],
        [1, 1, 1, 2, 3, 3, 4, 4, 4],
        [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]  # 16 elemente
    ]

    i = 0
    while i < len(test_vectors):
        vec = test_vectors[i]
        print("Vector original:", vec)
        encoded = encode_vector(vec)
        print("Vector codificat (6 octeÈ›i):", encoded)
        decoded = decode_vector(encoded)
        print("Vector decodificat:", decoded)
        if vec == decoded:
            print("Test OK.")
        else:
            print("Eroare la test.")
        print("-------------------------------------------------")
        i += 1

if __name__ == '__main__':
    main()
